#! /usr/bin/env python

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

""" gitview
GUI browser for git repository
This program is based on bzrk by Scott James Remnant <scott@ubuntu.com>
"""
__copyright__ = "Copyright (C) 2006 Hewlett-Packard Development Company, L.P."
__copyright__ = "Copyright (C) 2007 Aneesh Kumar K.V <aneesh.kumar@gmail.com"
__author__    = "Aneesh Kumar K.V <aneesh.kumar@gmail.com>"


import sys
import os
import gtk
import pygtk
import pango
import re
import time
import gobject
import cairo
import math
import string
import fcntl
try:
    import gnomevfs
    have_gnomevfs = True
except ImportError:
    have_gnomevfs = False
    print "Running without gnomevfs"

try:
    import gtksourceview
    have_gtksourceview = True
except ImportError:
    have_gtksourceview = False
    print "Running without gtksourceview module"


def get_mime_type(file):
    if have_gnomevfs:
        if os.path.isabs(file):
            path = file
        else:
            path = os.path.abspath(file)
        #uri = gnome.vfs.URI(path)
        mime_type = gnomevfs.get_mime_type(path) # needs ASCII filename, not URI
    else:            
	# the extmap stuff is stolen from meld
        # gnome.vfs.get_mime_type seems to be broken. fake it.
        extmap = { "xml":"text/xml",
                   "glade":"text/xml",
                   "cpp":"text/x-cpp",
                   "cxx":"text/x-cpp",
                   "cc":"text/x-cpp",
                   "C":"text/x-cpp",
                   "c":"text/x-c",
                   "hpp":"text/x-cpp",
                   "hxx":"text/x-cpp",
                   "hh":"text/x-cpp",
                   "H":"text/x-cpp",
                   "h":"text/x-cpp",
                   "inl":"text/x-cpp",
                   "desktop": "application/x-desktop",
                   "diff": "text/x-diff",
                   "patch": "text/x-diff",
                   "html": "text/html",
                   "po": "text/x-po",
                   "py": "text/x-python" }
        ext = self.file.split(".")[-1]
        mime_type = extmap.get(ext, "text/plain")
    return mime_type

re_ident = re.compile('(author|committer) (?P<ident>.*) (?P<epoch>\d+) (?P<tz>[+-]\d{4})')

def list_to_string(args, skip):
	count = len(args)
	i = skip
	str_arg=" "
	while (i < count ):
		str_arg = str_arg + args[i]
		str_arg = str_arg + " "
		i = i+1

	return str_arg

def show_date(epoch, tz):
	secs = float(epoch)
	tzsecs = float(tz[1:3]) * 3600
	tzsecs += float(tz[3:5]) * 60
	if (tz[0] == "+"):
		secs += tzsecs
	else:
		secs -= tzsecs

	return time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(secs))


class Commit(object):
	""" This represent a commit object obtained after parsing the git-rev-list
	output """

	__slots__ = ['children_sha1', 'message', 'author', 'date', 'committer',
				 'commit_date', 'commit_sha1', 'parent_sha1']

	children_sha1 = {}

	def __init__(self, commit_lines):
		self.message		= ""
		self.author		= ""
		self.date		= ""
		self.committer		= ""
		self.commit_date	= ""
		self.commit_sha1	= ""
		self.parent_sha1	= [ ]
		self.parse_commit(commit_lines)


	def parse_commit(self, commit_lines):

		# First line is the sha1 lines
		line = string.strip(commit_lines[0])
		sha1 = re.split(" ", line)
		self.commit_sha1 = sha1[0]
		self.parent_sha1 = sha1[1:]

		#build the child list
		for parent_id in self.parent_sha1:
			try:
				Commit.children_sha1[parent_id].append(self.commit_sha1)
			except KeyError:
				Commit.children_sha1[parent_id] = [self.commit_sha1]

		# IF we don't have parent
		if (len(self.parent_sha1) == 0):
			self.parent_sha1 = [0]

		for line in commit_lines[1:]:
			m = re.match("^ ", line)
			if (m != None):
				# First line of the commit message used for short log
				if self.message == "":
					self.message = string.strip(line)
				continue

			m = re.match("tree", line)
			if (m != None):
				continue

			m = re.match("parent", line)
			if (m != None):
				continue

			m = re_ident.match(line)
			if (m != None):
				date = show_date(m.group('epoch'), m.group('tz'))
				if m.group(1) == "author":
					self.author = m.group('ident')
					self.date = date
				elif m.group(1) == "committer":
					self.committer = m.group('ident')
					self.commit_date = date

				continue

	def get_message(self, with_diff=0):
		if (with_diff == 1):
			message = self.diff_tree()
		else:
			fp = os.popen("git cat-file commit " + self.commit_sha1)
			message = fp.read()
			fp.close()

		return message

	def diff_tree(self):
		fp = os.popen("git diff-tree --pretty --cc  -v -p --always " +  self.commit_sha1)
		diff = fp.read()
		fp.close()
		return diff

class ShowWindow(object):

	def __init__(self, file, encoding):
		self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_border_width(0)
		self.window.set_title("Git repository browser show window")

		# Use two thirds of the screen by default
		screen = self.window.get_screen()
		monitor = screen.get_monitor_geometry(0)
		width = int(monitor.width * 0.66)
		height = int(monitor.height * 0.66)
		self.window.set_default_size(width, height)

		self.window.connect("destroy", self._destroy_cb)

		self.file = file
		self.encoding = encoding

		self.construct()
		self.commits = []
		fp = os.popen("git rev-list HEAD " + self.file)
		input_line = fp.readline()
		while (input_line != ""):
			input_line = string.strip(input_line)
			self.commits.append(input_line)
			
			input_line = fp.readline()
		fp.close()
		self.commit_index = 0
		self.set_revision()

	def switch_revision(self, target_index, source_index):
		self.commit_index = target_index
		target_sha1 = self.commits[target_index]
		source_sha1 = self.commits[source_index]

		fp = os.popen("git show " + target_sha1 + ":" + self.file)
		target_text = unicode(fp.read(), self.encoding).encode('utf-8')
		fp.close()

		fp = os.popen("git show " + source_sha1 + ":" + self.file)
		source_text = unicode(fp.read(), self.encoding).encode('utf-8')
		fp.close()

		import difflib
		diff = difflib.ndiff(source_text.splitlines(1), target_text.splitlines(1))
		iter = self.buffer.get_iter_at_line(0)
		for line in diff:
			prefix = line[:2]
			if prefix == "  ":
				old = iter.copy()
				iter.forward_line()
				text_to_verify = old.get_slice(iter)
				if text_to_verify != line[2:]:
					print text_to_verify, line[2:]
					assert(text_to_verify == line[2:])
			elif prefix == "+ ":
				self.buffer.insert(iter, line[2:])
			elif prefix == "- ":
				old = iter.copy()
				iter.forward_line()
				text_to_delete = old.get_slice(iter)
				if text_to_delete != line[2:]:
					print text_to_delete, line[2:]
					assert(text_to_delete == line[2:])
				assert(old.get_line() < iter.get_line())
				self.buffer.delete(old, iter)
	
		self.update_view()

	def set_revision(self):
		commit_sha1 = self.commits[self.commit_index]
		#print "%d of %d = %s" % (self.commit_index+1, len(self.commits), commit_sha1)
		
                fp = os.popen("git show " + commit_sha1 + ":" + self.file)
		self.buffer.set_text(unicode(fp.read(), self.encoding).encode('utf-8'))
		fp.close()

		self.update_view()

	def update_view(self):
		commit_sha1 = self.commits[self.commit_index]

		fp = os.popen("git show " + commit_sha1 + " " + self.file)
		commit_msg = fp.read()
		fp.close()

		self.commit_buffer.set_text(commit_msg)


		self.forward_button.set_sensitive(True)
		self.back_button.set_sensitive(True)
		if self.commit_index == 0:
			self.forward_button.set_sensitive(False)
		if self.commit_index == len(self.commits) - 1:
			self.back_button.set_sensitive(False)

	def _destroy_cb(self, widget):
		"""Callback for when a window we manage is destroyed."""
		self.quit()

	def quit(self):
		"""Stop the GTK+ main loop."""
		gtk.main_quit()

	def show(self):
		self.window.show()

	def construct(self):
		"""Construct the window contents."""
		vbox = gtk.VBox()
		self.window.add(vbox)
		vbox.show()

		hbox = gtk.HBox()
		
		tool_bar = gtk.Toolbar()
		
		self.back_button = gtk.ToolButton(gtk.STOCK_GO_BACK)
		self.back_button.connect("clicked", self.back_menu_response, "back")
		self.back_button.show()
		tool_bar.insert(self.back_button, -1)
		
		self.forward_button = gtk.ToolButton(gtk.STOCK_GO_FORWARD)
		self.forward_button.connect("clicked", self.forward_menu_response, "forward")
		self.forward_button.show()
		tool_bar.insert(self.forward_button, -1)
		
		
		vbox.pack_start(tool_bar, expand=False, fill=True)
		tool_bar.show()

		vpan = gtk.VPaned();

		scrollwin = gtk.ScrolledWindow()
		scrollwin.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		scrollwin.set_shadow_type(gtk.SHADOW_IN)
		vpan.pack2(scrollwin, resize=True, shrink=True)
		scrollwin.show()
                self.scrollwin = scrollwin

		if have_gtksourceview:
			self.buffer = gtksourceview.SourceBuffer()
			slm = gtksourceview.SourceLanguagesManager()
			gsl = slm.get_language_from_mime_type(get_mime_type(self.file))
			self.buffer.set_highlight(True)
			self.buffer.set_language(gsl)
			sourceview = gtksourceview.SourceView(self.buffer)
		else:
			self.buffer = gtk.TextBuffer()
			sourceview = gtk.TextView(self.buffer)


		sourceview.set_editable(False)
		sourceview.modify_font(pango.FontDescription("Monospace"))
		scrollwin.add(sourceview)
		sourceview.show()
                self.sourceview = sourceview
                """
		# The file hierarchy: a scrollable treeview
		scrollwin = gtk.ScrolledWindow()
		scrollwin.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		scrollwin.set_shadow_type(gtk.SHADOW_IN)
		scrollwin.set_size_request(20, -1)
		hpan.pack2(scrollwin, True, True)
		scrollwin.show()
                
		self.model = gtk.TreeStore(str, str, str)
		self.treeview = gtk.TreeView(self.model)
		self.treeview.set_search_column(1)
		#self.treeview.connect("cursor-changed", self._treeview_clicked)
		scrollwin.add(self.treeview)
		self.treeview.show()
                
		cell = gtk.CellRendererText()
		cell.set_property("width-chars", 20)
		column = gtk.TreeViewColumn("Select to annotate")
		column.pack_start(cell, expand=True)
		column.add_attribute(cell, "text", 0)
		self.treeview.append_column(column)
                """
		
		# The commit message window
		scrollwin = gtk.ScrolledWindow()
		scrollwin.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		scrollwin.set_shadow_type(gtk.SHADOW_IN)
		vpan.pack1(scrollwin, resize=False, shrink=True);
		scrollwin.show()

		commit_text = gtk.TextView()
		commit_text.set_editable(False)
		self.commit_buffer = gtk.TextBuffer()
		commit_text.set_buffer(self.commit_buffer)
		scrollwin.add(commit_text)
		commit_text.show()

		
		vbox.pack_start(vpan, expand=True, fill=True)
		vpan.show()
                
        def value_changed():
                if self.hadjust:
                    self.scrollwin.set_hadjustment(self.hadjust)
                    self.scrollwin.set_vadjustment(self.vadjust)
		    self.hadjust = None


	def back_menu_response(self, widget, string):
		self.switch_revision(min(self.commit_index + 1, len(self.commits)-1), self.commit_index)
	
	def forward_menu_response(self, widget, string):
		self.switch_revision(max(self.commit_index-1, 0), self.commit_index)


class GitView(object):
	""" This is the main class
	"""
	version = "0.9"

	def __init__(self, with_diff=0):
		self.with_diff = with_diff
		self.window =	gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.window.set_border_width(0)
		self.window.set_title("Git repository browser")

		self.get_encoding()
		self.get_bt_sha1()

		# Use three-quarters of the screen by default
		screen = self.window.get_screen()
		monitor = screen.get_monitor_geometry(0)
		width = int(monitor.width * 0.75)
		height = int(monitor.height * 0.75)
		self.window.set_default_size(width, height)

		# FIXME AndyFitz!
		icon = self.window.render_icon(gtk.STOCK_INDEX, gtk.ICON_SIZE_BUTTON)
		self.window.set_icon(icon)

		self.accel_group = gtk.AccelGroup()
		self.window.add_accel_group(self.accel_group)
		self.accel_group.connect_group(0xffc2, 0, gtk.ACCEL_LOCKED, self.refresh);
		self.accel_group.connect_group(0xffc1, 0, gtk.ACCEL_LOCKED, self.maximize);
		self.accel_group.connect_group(0xffc8, 0, gtk.ACCEL_LOCKED, self.fullscreen);
		self.accel_group.connect_group(0xffc9, 0, gtk.ACCEL_LOCKED, self.unfullscreen);

		self.window.add(self.construct())

	def refresh(self, widget, event=None, *arguments, **keywords):
		self.get_encoding()
		self.get_bt_sha1()
		Commit.children_sha1 = {}
		self.set_branch(sys.argv[without_diff:])
		self.window.show()
		return True

	def maximize(self, widget, event=None, *arguments, **keywords):
		self.window.maximize()
		return True

	def fullscreen(self, widget, event=None, *arguments, **keywords):
		self.window.fullscreen()
		return True

	def unfullscreen(self, widget, event=None, *arguments, **keywords):
		self.window.unfullscreen()
		return True

	def get_bt_sha1(self):
		""" Update the bt_sha1 dictionary with the
		respective sha1 details """

		self.bt_sha1 = { }
		ls_remote = re.compile('^(.{40})\trefs/([^^]+)(?:\\^(..))?$');
		fp = os.popen('git ls-remote "${GIT_DIR-.git}"')
		while 1:
			line = string.strip(fp.readline())
			if line == '':
				break
			m = ls_remote.match(line)
			if not m:
				continue
			(sha1, name) = (m.group(1), m.group(2))
			if not self.bt_sha1.has_key(sha1):
				self.bt_sha1[sha1] = []
			self.bt_sha1[sha1].append(name)
		fp.close()

	def get_encoding(self):
		fp = os.popen("git config --get i18n.commitencoding")
		self.encoding=string.strip(fp.readline())
		fp.close()
		if (self.encoding == ""):
			self.encoding = "utf-8"


	def construct(self):
		"""Construct the window contents."""
		vbox = gtk.VBox()
		paned = gtk.VPaned()
		paned.pack1(self.construct_top(), resize=False, shrink=True)
		paned.pack2(self.construct_bottom(), resize=False, shrink=True)
		menu_bar = gtk.MenuBar()
		menu_bar.set_pack_direction(gtk.PACK_DIRECTION_RTL)
		help_menu = gtk.MenuItem("Help")
		menu = gtk.Menu()
		about_menu = gtk.MenuItem("About")
		menu.append(about_menu)
		about_menu.connect("activate", self.about_menu_response, "about")
		about_menu.show()
		help_menu.set_submenu(menu)
		help_menu.show()
		menu_bar.append(help_menu)
		menu_bar.show()
		vbox.pack_start(menu_bar, expand=False, fill=True)
		vbox.pack_start(paned, expand=True, fill=True)
		paned.show()
		vbox.show()
		return vbox


	def construct_top(self):
		"""Construct the top-half of the window."""
		vbox = gtk.VBox(spacing=6)
		vbox.set_border_width(12)
		vbox.show()


		scrollwin = gtk.ScrolledWindow()
		scrollwin.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		scrollwin.set_shadow_type(gtk.SHADOW_IN)
		vbox.pack_start(scrollwin, expand=True, fill=True)
		scrollwin.show()

		self.treeview = gtk.TreeView()
		self.treeview.set_rules_hint(True)
		self.treeview.set_search_column(4)
		self.treeview.connect("cursor-changed", self._treeview_cursor_cb)
		scrollwin.add(self.treeview)
		self.treeview.show()

		cell = CellRendererGraph()
		column = gtk.TreeViewColumn()
		column.set_resizable(True)
		column.pack_start(cell, expand=True)
		column.add_attribute(cell, "node", 1)
		column.add_attribute(cell, "in-lines", 2)
		column.add_attribute(cell, "out-lines", 3)
		self.treeview.append_column(column)

		cell = gtk.CellRendererText()
		cell.set_property("width-chars", 65)
		cell.set_property("ellipsize", pango.ELLIPSIZE_END)
		column = gtk.TreeViewColumn("Message")
		column.set_resizable(True)
		column.pack_start(cell, expand=True)
		column.add_attribute(cell, "text", 4)
		self.treeview.append_column(column)

		cell = gtk.CellRendererText()
		cell.set_property("width-chars", 40)
		cell.set_property("ellipsize", pango.ELLIPSIZE_END)
		column = gtk.TreeViewColumn("Author")
		column.set_resizable(True)
		column.pack_start(cell, expand=True)
		column.add_attribute(cell, "text", 5)
		self.treeview.append_column(column)

		cell = gtk.CellRendererText()
		cell.set_property("ellipsize", pango.ELLIPSIZE_END)
		column = gtk.TreeViewColumn("Date")
		column.set_resizable(True)
		column.pack_start(cell, expand=True)
		column.add_attribute(cell, "text", 6)
		self.treeview.append_column(column)

		return vbox

	def about_menu_response(self, widget, string):
		dialog = gtk.AboutDialog()
		dialog.set_name("Gitview")
		dialog.set_version(GitView.version)
		dialog.set_authors(["Aneesh Kumar K.V <aneesh.kumar@gmail.com>"])
		dialog.set_website("http://www.kernel.org/pub/software/scm/git/")
		dialog.set_copyright("Use and distribute under the terms of the GNU General Public License")
		dialog.set_wrap_license(True)
		dialog.run()
		dialog.destroy()


	def construct_bottom(self):
		"""Construct the bottom half of the window."""
		vbox = gtk.VBox(False, spacing=6)
		vbox.set_border_width(12)
		(width, height) = self.window.get_size()
		vbox.set_size_request(width, int(height / 2.5))
		vbox.show()

		self.table = gtk.Table(rows=4, columns=4)
		self.table.set_row_spacings(6)
		self.table.set_col_spacings(6)
		vbox.pack_start(self.table, expand=False, fill=True)
		self.table.show()

		align = gtk.Alignment(0.0, 0.5)
		label = gtk.Label()
		label.set_markup("<b>Revision:</b>")
		align.add(label)
		self.table.attach(align, 0, 1, 0, 1, gtk.FILL, gtk.FILL)
		label.show()
		align.show()

		align = gtk.Alignment(0.0, 0.5)
		self.revid_label = gtk.Label()
		self.revid_label.set_selectable(True)
		align.add(self.revid_label)
		self.table.attach(align, 1, 2, 0, 1, gtk.EXPAND | gtk.FILL, gtk.FILL)
		self.revid_label.show()
		align.show()

		align = gtk.Alignment(0.0, 0.5)
		label = gtk.Label()
		label.set_markup("<b>Committer:</b>")
		align.add(label)
		self.table.attach(align, 0, 1, 1, 2, gtk.FILL, gtk.FILL)
		label.show()
		align.show()

		align = gtk.Alignment(0.0, 0.5)
		self.committer_label = gtk.Label()
		self.committer_label.set_selectable(True)
		align.add(self.committer_label)
		self.table.attach(align, 1, 2, 1, 2, gtk.EXPAND | gtk.FILL, gtk.FILL)
		self.committer_label.show()
		align.show()

		align = gtk.Alignment(0.0, 0.5)
		label = gtk.Label()
		label.set_markup("<b>Timestamp:</b>")
		align.add(label)
		self.table.attach(align, 0, 1, 2, 3, gtk.FILL, gtk.FILL)
		label.show()
		align.show()

		align = gtk.Alignment(0.0, 0.5)
		self.timestamp_label = gtk.Label()
		self.timestamp_label.set_selectable(True)
		align.add(self.timestamp_label)
		self.table.attach(align, 1, 2, 2, 3, gtk.EXPAND | gtk.FILL, gtk.FILL)
		self.timestamp_label.show()
		align.show()

		align = gtk.Alignment(0.0, 0.5)
		label = gtk.Label()
		label.set_markup("<b>Parents:</b>")
		align.add(label)
		self.table.attach(align, 0, 1, 3, 4, gtk.FILL, gtk.FILL)
		label.show()
		align.show()
		self.parents_widgets = []

		align = gtk.Alignment(0.0, 0.5)
		label = gtk.Label()
		label.set_markup("<b>Children:</b>")
		align.add(label)
		self.table.attach(align, 2, 3, 3, 4, gtk.FILL, gtk.FILL)
		label.show()
		align.show()
		self.children_widgets = []

		scrollwin = gtk.ScrolledWindow()
		scrollwin.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
		scrollwin.set_shadow_type(gtk.SHADOW_IN)
		vbox.pack_start(scrollwin, expand=True, fill=True)
		scrollwin.show()

		if have_gtksourceview:
			self.message_buffer = gtksourceview.SourceBuffer()
			slm = gtksourceview.SourceLanguagesManager()
			gsl = slm.get_language_from_mime_type("text/x-patch")
			self.message_buffer.set_highlight(True)
			self.message_buffer.set_language(gsl)
			sourceview = gtksourceview.SourceView(self.message_buffer)
		else:
			self.message_buffer = gtk.TextBuffer()
			sourceview = gtk.TextView(self.message_buffer)

		sourceview.set_editable(False)
		sourceview.modify_font(pango.FontDescription("Monospace"))
		scrollwin.add(sourceview)
		sourceview.show()

		return vbox

	def _treeview_cursor_cb(self, *args):
		"""Callback for when the treeview cursor changes."""
		(path, col) = self.treeview.get_cursor()
		commit = self.model[path][0]

		if commit.committer is not None:
			committer = commit.committer
			timestamp = commit.commit_date
			message   =  commit.get_message(self.with_diff)
			revid_label = commit.commit_sha1
		else:
			committer = ""
			timestamp = ""
			message = ""
			revid_label = ""

		self.revid_label.set_text(revid_label)
		self.committer_label.set_text(committer)
		self.timestamp_label.set_text(timestamp)
		self.message_buffer.set_text(unicode(message, self.encoding).encode('utf-8'))

		for widget in self.parents_widgets:
			self.table.remove(widget)

		self.parents_widgets = []
		self.table.resize(4 + len(commit.parent_sha1) - 1, 4)
		for idx, parent_id in enumerate(commit.parent_sha1):
			self.table.set_row_spacing(idx + 3, 0)

			align = gtk.Alignment(0.0, 0.0)
			self.parents_widgets.append(align)
			self.table.attach(align, 1, 2, idx + 3, idx + 4,
					gtk.EXPAND | gtk.FILL, gtk.FILL)
			align.show()

			hbox = gtk.HBox(False, 0)
			align.add(hbox)
			hbox.show()

			label = gtk.Label(parent_id)
			label.set_selectable(True)
			hbox.pack_start(label, expand=False, fill=True)
			label.show()

			image = gtk.Image()
			image.set_from_stock(gtk.STOCK_JUMP_TO, gtk.ICON_SIZE_MENU)
			image.show()

			button = gtk.Button()
			button.add(image)
			button.set_relief(gtk.RELIEF_NONE)
			button.connect("clicked", self._go_clicked_cb, parent_id)
			hbox.pack_start(button, expand=False, fill=True)
			button.show()

			image = gtk.Image()
			image.set_from_stock(gtk.STOCK_FIND, gtk.ICON_SIZE_MENU)
			image.show()

			button = gtk.Button()
			button.add(image)
			button.set_relief(gtk.RELIEF_NONE)
			button.set_sensitive(True)
			button.connect("clicked", self._show_clicked_cb,
					commit.commit_sha1, parent_id, self.encoding)
			hbox.pack_start(button, expand=False, fill=True)
			button.show()

		# Populate with child details
		for widget in self.children_widgets:
			self.table.remove(widget)

		self.children_widgets = []
		try:
			child_sha1 = Commit.children_sha1[commit.commit_sha1]
		except KeyError:
			# We don't have child
			child_sha1 = [ 0 ]

		if ( len(child_sha1) > len(commit.parent_sha1)):
			self.table.resize(4 + len(child_sha1) - 1, 4)

		for idx, child_id in enumerate(child_sha1):
			self.table.set_row_spacing(idx + 3, 0)

			align = gtk.Alignment(0.0, 0.0)
			self.children_widgets.append(align)
			self.table.attach(align, 3, 4, idx + 3, idx + 4,
					gtk.EXPAND | gtk.FILL, gtk.FILL)
			align.show()

			hbox = gtk.HBox(False, 0)
			align.add(hbox)
			hbox.show()

			label = gtk.Label(child_id)
			label.set_selectable(True)
			hbox.pack_start(label, expand=False, fill=True)
			label.show()

			image = gtk.Image()
			image.set_from_stock(gtk.STOCK_JUMP_TO, gtk.ICON_SIZE_MENU)
			image.show()

			button = gtk.Button()
			button.add(image)
			button.set_relief(gtk.RELIEF_NONE)
			button.connect("clicked", self._go_clicked_cb, child_id)
			hbox.pack_start(button, expand=False, fill=True)
			button.show()

			image = gtk.Image()
			image.set_from_stock(gtk.STOCK_FIND, gtk.ICON_SIZE_MENU)
			image.show()

			button = gtk.Button()
			button.add(image)
			button.set_relief(gtk.RELIEF_NONE)
			button.set_sensitive(True)
			button.connect("clicked", self._show_clicked_cb,
					child_id, commit.commit_sha1, self.encoding)
			hbox.pack_start(button, expand=False, fill=True)
			button.show()

	def _destroy_cb(self, widget):
		"""Callback for when a window we manage is destroyed."""
		self.quit()


	def quit(self):
		"""Stop the GTK+ main loop."""
		gtk.main_quit()

	def run(self, args):
		self.set_branch(args)
		self.window.connect("destroy", self._destroy_cb)
		self.window.show()
		show = ShowWindow(args[1], self.encoding)
		#show.set_revision("HEAD")
		show.show()
		gtk.main()

	def set_branch(self, args):
		"""Fill in different windows with info from the reposiroty"""
		fp = os.popen("git rev-parse --sq --default HEAD " + list_to_string(args, 1))
		git_rev_list_cmd = fp.read()
		fp.close()
		fp = os.popen("git rev-list  --header --topo-order --parents " + git_rev_list_cmd)
		self.update_window(fp)

	def update_window(self, fp):
		commit_lines = []

		self.model = gtk.ListStore(gobject.TYPE_PYOBJECT, gobject.TYPE_PYOBJECT,
				gobject.TYPE_PYOBJECT, gobject.TYPE_PYOBJECT, str, str, str)

		# used for cursor positioning
		self.index = {}

		self.colours = {}
		self.nodepos = {}
		self.incomplete_line = {}
		self.commits = []

		index = 0
		last_colour = 0
		last_nodepos = -1
		out_line = []
		input_line = fp.readline()
		while (input_line != ""):
			# The commit header ends with '\0'
			# This NULL is immediately followed by the sha1 of the
			# next commit
			if (input_line[0] != '\0'):
				commit_lines.append(input_line)
				input_line = fp.readline()
				continue;

			commit = Commit(commit_lines)
			if (commit != None ):
				self.commits.append(commit)

			# Skip the '\0
			commit_lines = []
			commit_lines.append(input_line[1:])
			input_line = fp.readline()

		fp.close()

		for commit in self.commits:
			(out_line, last_colour, last_nodepos) = self.draw_graph(commit,
										index, out_line,
										last_colour,
										last_nodepos)
			self.index[commit.commit_sha1] = index
			index += 1

		self.treeview.set_model(self.model)
		self.treeview.show()

	def draw_graph(self, commit, index, out_line, last_colour, last_nodepos):
		in_line=[]

		#   |   -> outline
		#   X
		#   |\  <- inline

		# Reset nodepostion
		if (last_nodepos > 5):
			last_nodepos = -1

		# Add the incomplete lines of the last cell in this
		try:
			colour = self.colours[commit.commit_sha1]
		except KeyError:
			self.colours[commit.commit_sha1] = last_colour+1
			last_colour = self.colours[commit.commit_sha1]
			colour =   self.colours[commit.commit_sha1]

		try:
			node_pos = self.nodepos[commit.commit_sha1]
		except KeyError:
			self.nodepos[commit.commit_sha1] = last_nodepos+1
			last_nodepos = self.nodepos[commit.commit_sha1]
			node_pos =  self.nodepos[commit.commit_sha1]

		#The first parent always continue on the same line
		try:
			# check we alreay have the value
			tmp_node_pos = self.nodepos[commit.parent_sha1[0]]
		except KeyError:
			self.colours[commit.parent_sha1[0]] = colour
			self.nodepos[commit.parent_sha1[0]] = node_pos

		for sha1 in self.incomplete_line.keys():
			if (sha1 != commit.commit_sha1):
				self.draw_incomplete_line(sha1, node_pos,
						out_line, in_line, index)
			else:
				del self.incomplete_line[sha1]


		for parent_id in commit.parent_sha1:
			try:
				tmp_node_pos = self.nodepos[parent_id]
			except KeyError:
				self.colours[parent_id] = last_colour+1
				last_colour = self.colours[parent_id]
				self.nodepos[parent_id] = last_nodepos+1
				last_nodepos = self.nodepos[parent_id]

			in_line.append((node_pos, self.nodepos[parent_id],
						self.colours[parent_id]))
			self.add_incomplete_line(parent_id)

		try:
			branch_tag = self.bt_sha1[commit.commit_sha1]
		except KeyError:
			branch_tag = [ ]


		node = (node_pos, colour, branch_tag)

		self.model.append([commit, node, out_line, in_line,
				commit.message, commit.author, commit.date])

		return (in_line, last_colour, last_nodepos)

	def add_incomplete_line(self, sha1):
		try:
			self.incomplete_line[sha1].append(self.nodepos[sha1])
		except KeyError:
			self.incomplete_line[sha1] = [self.nodepos[sha1]]

	def draw_incomplete_line(self, sha1, node_pos, out_line, in_line, index):
		for idx, pos in enumerate(self.incomplete_line[sha1]):
			if(pos == node_pos):
				#remove the straight line and add a slash
				if ((pos, pos, self.colours[sha1]) in out_line):
					out_line.remove((pos, pos, self.colours[sha1]))
				out_line.append((pos, pos+0.5, self.colours[sha1]))
				self.incomplete_line[sha1][idx] = pos = pos+0.5
			try:
				next_commit = self.commits[index+1]
				if (next_commit.commit_sha1 == sha1 and pos != int(pos)):
				# join the line back to the node point
				# This need to be done only if we modified it
					in_line.append((pos, pos-0.5, self.colours[sha1]))
					continue;
			except IndexError:
				pass
			in_line.append((pos, pos, self.colours[sha1]))


	def _go_clicked_cb(self, widget, revid):
		"""Callback for when the go button for a parent is clicked."""
		try:
			self.treeview.set_cursor(self.index[revid])
		except KeyError:
			dialog = gtk.MessageDialog(parent=None, flags=0,
					type=gtk.MESSAGE_WARNING, buttons=gtk.BUTTONS_CLOSE,
					message_format=None)
			dialog.set_markup("Revision <b>%s</b> not present in the list" % revid)
			# revid == 0 is the parent of the first commit
			if (revid != 0 ):
				dialog.format_secondary_text("Try running gitview without any options")
			dialog.run()
			dialog.destroy()

		self.treeview.grab_focus()

	def _show_clicked_cb(self, widget,  commit_sha1, parent_sha1, encoding):
		"""Callback for when the show button for a parent is clicked."""
		window = DiffWindow()
		window.set_diff(commit_sha1, parent_sha1, encoding)
		self.treeview.grab_focus()

without_diff = 0
if __name__ == "__main__":

	if (len(sys.argv) > 1 ):
		if (sys.argv[1] == "--without-diff"):
			without_diff = 1
	
	show = ShowWindow(sys.argv[1], "utf-8")
	#show.set_revision("HEAD")
	show.show()
	gtk.main()

	#view = GitView( without_diff != 1)
	#view.run(sys.argv[without_diff:])
